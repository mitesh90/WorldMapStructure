//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorldMap.MVC.ContinentDataServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContinentData", Namespace="http://schemas.datacontract.org/2004/07/WorldMap.Model")]
    [System.SerializableAttribute()]
    public partial class ContinentData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContinentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContinentNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WorldMap.MVC.ContinentDataServiceReference.CountryData[] countryDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContinentId {
            get {
                return this.ContinentIdField;
            }
            set {
                if ((this.ContinentIdField.Equals(value) != true)) {
                    this.ContinentIdField = value;
                    this.RaisePropertyChanged("ContinentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContinentName {
            get {
                return this.ContinentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ContinentNameField, value) != true)) {
                    this.ContinentNameField = value;
                    this.RaisePropertyChanged("ContinentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WorldMap.MVC.ContinentDataServiceReference.CountryData[] countryData {
            get {
                return this.countryDataField;
            }
            set {
                if ((object.ReferenceEquals(this.countryDataField, value) != true)) {
                    this.countryDataField = value;
                    this.RaisePropertyChanged("countryData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CountryData", Namespace="http://schemas.datacontract.org/2004/07/WorldMap.Model")]
    [System.SerializableAttribute()]
    public partial class CountryData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ContinentIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryCapitalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsIslandField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WorldMap.MVC.ContinentDataServiceReference.OverseasTerritoriesData[] overseasTerritoriesDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WorldMap.MVC.ContinentDataServiceReference.StateData[] stateDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ContinentId {
            get {
                return this.ContinentIdField;
            }
            set {
                if ((this.ContinentIdField.Equals(value) != true)) {
                    this.ContinentIdField = value;
                    this.RaisePropertyChanged("ContinentId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryCapital {
            get {
                return this.CountryCapitalField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryCapitalField, value) != true)) {
                    this.CountryCapitalField = value;
                    this.RaisePropertyChanged("CountryCapital");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountryName {
            get {
                return this.CountryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryNameField, value) != true)) {
                    this.CountryNameField = value;
                    this.RaisePropertyChanged("CountryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsIsland {
            get {
                return this.IsIslandField;
            }
            set {
                if ((this.IsIslandField.Equals(value) != true)) {
                    this.IsIslandField = value;
                    this.RaisePropertyChanged("IsIsland");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WorldMap.MVC.ContinentDataServiceReference.OverseasTerritoriesData[] overseasTerritoriesData {
            get {
                return this.overseasTerritoriesDataField;
            }
            set {
                if ((object.ReferenceEquals(this.overseasTerritoriesDataField, value) != true)) {
                    this.overseasTerritoriesDataField = value;
                    this.RaisePropertyChanged("overseasTerritoriesData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WorldMap.MVC.ContinentDataServiceReference.StateData[] stateData {
            get {
                return this.stateDataField;
            }
            set {
                if ((object.ReferenceEquals(this.stateDataField, value) != true)) {
                    this.stateDataField = value;
                    this.RaisePropertyChanged("stateData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OverseasTerritoriesData", Namespace="http://schemas.datacontract.org/2004/07/WorldMap.Model")]
    [System.SerializableAttribute()]
    public partial class OverseasTerritoriesData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OverseasTerritoriesIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OverseasTerritoriesNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OverseasTerritoriesId {
            get {
                return this.OverseasTerritoriesIdField;
            }
            set {
                if ((this.OverseasTerritoriesIdField.Equals(value) != true)) {
                    this.OverseasTerritoriesIdField = value;
                    this.RaisePropertyChanged("OverseasTerritoriesId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OverseasTerritoriesName {
            get {
                return this.OverseasTerritoriesNameField;
            }
            set {
                if ((object.ReferenceEquals(this.OverseasTerritoriesNameField, value) != true)) {
                    this.OverseasTerritoriesNameField = value;
                    this.RaisePropertyChanged("OverseasTerritoriesName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StateData", Namespace="http://schemas.datacontract.org/2004/07/WorldMap.Model")]
    [System.SerializableAttribute()]
    public partial class StateData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountryIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateCapitalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StateIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WorldMap.MVC.ContinentDataServiceReference.CityData[] cityDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CountryId {
            get {
                return this.CountryIdField;
            }
            set {
                if ((this.CountryIdField.Equals(value) != true)) {
                    this.CountryIdField = value;
                    this.RaisePropertyChanged("CountryId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateCapital {
            get {
                return this.StateCapitalField;
            }
            set {
                if ((object.ReferenceEquals(this.StateCapitalField, value) != true)) {
                    this.StateCapitalField = value;
                    this.RaisePropertyChanged("StateCapital");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StateId {
            get {
                return this.StateIdField;
            }
            set {
                if ((this.StateIdField.Equals(value) != true)) {
                    this.StateIdField = value;
                    this.RaisePropertyChanged("StateId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StateName {
            get {
                return this.StateNameField;
            }
            set {
                if ((object.ReferenceEquals(this.StateNameField, value) != true)) {
                    this.StateNameField = value;
                    this.RaisePropertyChanged("StateName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WorldMap.MVC.ContinentDataServiceReference.CityData[] cityData {
            get {
                return this.cityDataField;
            }
            set {
                if ((object.ReferenceEquals(this.cityDataField, value) != true)) {
                    this.cityDataField = value;
                    this.RaisePropertyChanged("cityData");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CityData", Namespace="http://schemas.datacontract.org/2004/07/WorldMap.Model")]
    [System.SerializableAttribute()]
    public partial class CityData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CityIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StateIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CityId {
            get {
                return this.CityIdField;
            }
            set {
                if ((this.CityIdField.Equals(value) != true)) {
                    this.CityIdField = value;
                    this.RaisePropertyChanged("CityId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CityName {
            get {
                return this.CityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CityNameField, value) != true)) {
                    this.CityNameField = value;
                    this.RaisePropertyChanged("CityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StateId {
            get {
                return this.StateIdField;
            }
            set {
                if ((this.StateIdField.Equals(value) != true)) {
                    this.StateIdField = value;
                    this.RaisePropertyChanged("StateId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ContinentDataServiceReference.IContinentDataService")]
    public interface IContinentDataService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContinentDataService/Insert", ReplyAction="http://tempuri.org/IContinentDataService/InsertResponse")]
        void Insert(WorldMap.MVC.ContinentDataServiceReference.ContinentData entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContinentDataService/Insert", ReplyAction="http://tempuri.org/IContinentDataService/InsertResponse")]
        System.Threading.Tasks.Task InsertAsync(WorldMap.MVC.ContinentDataServiceReference.ContinentData entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContinentDataService/Delete", ReplyAction="http://tempuri.org/IContinentDataService/DeleteResponse")]
        void Delete(WorldMap.MVC.ContinentDataServiceReference.ContinentData entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContinentDataService/Delete", ReplyAction="http://tempuri.org/IContinentDataService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(WorldMap.MVC.ContinentDataServiceReference.ContinentData entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContinentDataService/Update", ReplyAction="http://tempuri.org/IContinentDataService/UpdateResponse")]
        void Update(WorldMap.MVC.ContinentDataServiceReference.ContinentData entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContinentDataService/Update", ReplyAction="http://tempuri.org/IContinentDataService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(WorldMap.MVC.ContinentDataServiceReference.ContinentData entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContinentDataService/SelectAll", ReplyAction="http://tempuri.org/IContinentDataService/SelectAllResponse")]
        WorldMap.MVC.ContinentDataServiceReference.ContinentData[] SelectAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContinentDataService/SelectAll", ReplyAction="http://tempuri.org/IContinentDataService/SelectAllResponse")]
        System.Threading.Tasks.Task<WorldMap.MVC.ContinentDataServiceReference.ContinentData[]> SelectAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContinentDataService/SelectById", ReplyAction="http://tempuri.org/IContinentDataService/SelectByIdResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorldMap.MVC.ContinentDataServiceReference.ContinentData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorldMap.MVC.ContinentDataServiceReference.CountryData[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorldMap.MVC.ContinentDataServiceReference.CountryData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorldMap.MVC.ContinentDataServiceReference.OverseasTerritoriesData[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorldMap.MVC.ContinentDataServiceReference.OverseasTerritoriesData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorldMap.MVC.ContinentDataServiceReference.StateData[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorldMap.MVC.ContinentDataServiceReference.StateData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorldMap.MVC.ContinentDataServiceReference.CityData[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorldMap.MVC.ContinentDataServiceReference.CityData))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(WorldMap.MVC.ContinentDataServiceReference.ContinentData[]))]
        WorldMap.MVC.ContinentDataServiceReference.ContinentData SelectById(object id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IContinentDataService/SelectById", ReplyAction="http://tempuri.org/IContinentDataService/SelectByIdResponse")]
        System.Threading.Tasks.Task<WorldMap.MVC.ContinentDataServiceReference.ContinentData> SelectByIdAsync(object id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IContinentDataServiceChannel : WorldMap.MVC.ContinentDataServiceReference.IContinentDataService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ContinentDataServiceClient : System.ServiceModel.ClientBase<WorldMap.MVC.ContinentDataServiceReference.IContinentDataService>, WorldMap.MVC.ContinentDataServiceReference.IContinentDataService {
        
        public ContinentDataServiceClient() {
        }
        
        public ContinentDataServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ContinentDataServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContinentDataServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ContinentDataServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Insert(WorldMap.MVC.ContinentDataServiceReference.ContinentData entity) {
            base.Channel.Insert(entity);
        }
        
        public System.Threading.Tasks.Task InsertAsync(WorldMap.MVC.ContinentDataServiceReference.ContinentData entity) {
            return base.Channel.InsertAsync(entity);
        }
        
        public void Delete(WorldMap.MVC.ContinentDataServiceReference.ContinentData entity) {
            base.Channel.Delete(entity);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(WorldMap.MVC.ContinentDataServiceReference.ContinentData entity) {
            return base.Channel.DeleteAsync(entity);
        }
        
        public void Update(WorldMap.MVC.ContinentDataServiceReference.ContinentData entity) {
            base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(WorldMap.MVC.ContinentDataServiceReference.ContinentData entity) {
            return base.Channel.UpdateAsync(entity);
        }
        
        public WorldMap.MVC.ContinentDataServiceReference.ContinentData[] SelectAll() {
            return base.Channel.SelectAll();
        }
        
        public System.Threading.Tasks.Task<WorldMap.MVC.ContinentDataServiceReference.ContinentData[]> SelectAllAsync() {
            return base.Channel.SelectAllAsync();
        }
        
        public WorldMap.MVC.ContinentDataServiceReference.ContinentData SelectById(object id) {
            return base.Channel.SelectById(id);
        }
        
        public System.Threading.Tasks.Task<WorldMap.MVC.ContinentDataServiceReference.ContinentData> SelectByIdAsync(object id) {
            return base.Channel.SelectByIdAsync(id);
        }
    }
}
