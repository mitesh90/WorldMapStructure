<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    xmlns:resx="WpfTheme/Themes/Colors.xaml"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:Controls="clr-namespace:WpfTheme.Controls"
                    xmlns:control="clr-namespace:WpfTheme.Controls" mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Colors.xaml" />
    </ResourceDictionary.MergedDictionaries>


    <Controls:ToUpperConverter x:Key="ToUpperConverter" />
    <Controls:ToLowerConverter x:Key="ToLowerConverter" />
    <Style TargetType="{x:Type Button}" x:Key="MetroButton">
        <Setter Property="control:ButtonHelper.CornerRadius" Value="3" />
        <Setter Property="Controls:ControlsHelper.IconWidth" Value="17" ></Setter>
        <Setter Property="Controls:ControlsHelper.IconHeight" Value="17" ></Setter>
        <Setter Property="Controls:ControlsHelper.IconFill" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Foreground}" ></Setter>
        <Setter Property="Controls:ButtonHelper.PreserveTextCase" Value="True" ></Setter>
        <Setter Property="BorderBrush" Value="{DynamicResource AccentColorBrush}" ></Setter>
        <Setter Property="Foreground" Value="{DynamicResource WhiteColorBrush}" ></Setter>
        <Setter Property="Padding" Value="30,0" ></Setter>
        <Setter Property="Height" Value="40" ></Setter>
        <Setter Property="HorizontalAlignment" Value="Right" ></Setter>
        <Setter Property="FontSize" Value="{DynamicResource IconButtonFontSize}" />
        <Setter Property="FontWeight" Value="Normal"></Setter>
        <Setter Property="VerticalAlignment" Value="Center" ></Setter>
        <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" ></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="Background"
                                Background="{TemplateBinding Background}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ButtonHelper.CornerRadius), Mode=OneWay}" />
                        <Border x:Name="Border"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{x:Null}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ButtonHelper.CornerRadius), Mode=OneWay}" />
                        <Border x:Name="DisabledVisualElement"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Background="{DynamicResource ControlsDisabledBrush}"
                                IsHitTestVisible="false"
                                Opacity="0"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ButtonHelper.CornerRadius), Mode=OneWay}" />
                        <Border x:Name="BorderWithIcon" HorizontalAlignment="Stretch"  CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ButtonHelper.CornerRadius), Mode=OneWay}" Padding="{TemplateBinding Padding}" >
                            <Grid >
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" ></ColumnDefinition>
                                    <ColumnDefinition Width="*" ></ColumnDefinition>
                                </Grid.ColumnDefinitions>
                                <Border  Name="PATH_Icon" HorizontalAlignment="Center" Margin="0,0,15,0">
                                    <Path HorizontalAlignment="Center" MaxHeight="17" MaxWidth="20" MinWidth="{TemplateBinding Controls:ControlsHelper.IconWidth}"  MinHeight="{TemplateBinding Controls:ControlsHelper.IconHeight}" Stretch="Uniform"  Fill="{TemplateBinding Controls:ControlsHelper.IconFill}" Data="{TemplateBinding Controls:ControlsHelper.IconGeometry}" />
                                </Border>
                                <ContentPresenter x:Name="contentPresenter" Grid.Column="1"   SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          RecognizesAccessKey="True" 
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"                                          
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Grid>
                        </Border>
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Controls:ButtonHelper.PreserveTextCase"
                                 Value="False">
                            <Setter TargetName="contentPresenter"
                                    Property="Content"
                                    Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content, Converter={StaticResource ToUpperConverter}}" />
                        </Trigger>
                        <Trigger Property="Controls:ButtonHelper.PreserveTextCase"
                                 Value="True">
                            <Setter TargetName="contentPresenter"
                                    Property="Content"
                                    Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" />
                        </Trigger>

                        <Trigger Property="Controls:ControlsHelper.IconGeometry" Value="{x:Null}" >
                            <Setter TargetName="PATH_Icon" Property="Visibility" Value="Collapsed" />
                        </Trigger>

                        <Trigger Property="Content" Value="{x:Null}" >
                            <Setter TargetName="PATH_Icon" Property="Margin" Value="0" />
                        </Trigger>

                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush2}" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource HighlightBrush}" />
                        </Trigger>
                        <!--<Trigger Property="IsKeyboardFocusWithin"
                                 Value="True">
                            <Setter TargetName="MAIN_Border"
                                    Property="BorderThickness"
                                    Value="0.5" />
                            <Setter TargetName="MAIN_Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonMouseOverBorderBrush}" />
                        </Trigger>-->
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter TargetName="DisabledVisualElement"
                                    Property="Opacity"
                                    Value="0.7" />
                            <Setter TargetName="BorderWithIcon"
                                    Property="Opacity"
                                    Value="0.9" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ChromelessButtonTemplate"
                     TargetType="{x:Type ButtonBase}">
        <Grid Background="{TemplateBinding Background}">
            <ContentPresenter x:Name="contentPresenter"
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              Margin="{TemplateBinding Padding}"
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                              RecognizesAccessKey="True"
                              Opacity="0.75" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter TargetName="contentPresenter"
                        Property="Opacity"
                        Value="1" />
            </Trigger>
            <Trigger Property="IsMouseOver"
                     Value="False">
                <Setter TargetName="contentPresenter"
                        Property="Opacity"
                        Value=".5" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Foreground"
                        Value="#ADADAD" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="ChromelessButtonStyle"
           TargetType="{x:Type ButtonBase}">
        <Setter Property="Background"
                Value="{DynamicResource TransparentWhiteBrush}" />
        <Setter Property="Foreground"
                Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template"
                Value="{StaticResource ChromelessButtonTemplate}" />
    </Style>
    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MetroButton}"></Style>
    <Style x:Key="MetroBaseWindowButtonStyle"
           TargetType="{x:Type Button}">
        <Setter Property="Background"
                Value="{DynamicResource TransparentWhiteBrush}" />
        <Setter Property="Foreground"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}" />
        <Setter Property="HorizontalContentAlignment"
                Value="Center" />
        <Setter Property="VerticalContentAlignment"
                Value="Center" />
        <Setter Property="Padding"
                Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="contentPresenter"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          RecognizesAccessKey="True"
                                          Opacity="0.75" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="contentPresenter"
                                    Property="Opacity"
                                    Value="1" />
                        </Trigger>
                        <Trigger Property="IsMouseOver"
                                 Value="False">
                            <Setter TargetName="contentPresenter"
                                    Property="Opacity"
                                    Value=".5" />
                        </Trigger>
                    </ControlTemplate.Triggers>

                </ControlTemplate>

            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Background"
                        Value="{DynamicResource SemiTransparentWhiteBrush}" />
            </Trigger>

            <Trigger Property="IsPressed"
                     Value="True">
                <Setter Property="Background"
                        Value="{DynamicResource HighlightBrush}" />
                <Setter Property="Foreground" 
                        Value="{StaticResource WhiteColorBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="false">
                <Setter Property="Foreground"
                        Value="{DynamicResource IdealForegroundDisabledBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="MetroWindowButtonStyle"
           TargetType="{x:Type Button}"
           BasedOn="{StaticResource MetroBaseWindowButtonStyle}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="IsTabStop"
                Value="False" />
        <Setter Property="Width"
                Value="34" />
        <Setter Property="MaxHeight"
                Value="34" />
        <Setter Property="Padding"
                Value="0" />
    </Style>
    <Style TargetType="{x:Type Button}" x:Key="SimpleButton" BasedOn="{StaticResource MetroButton}">
        <Setter Property="Controls:ButtonHelper.CornerRadius"
                Value="0" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="BorderBrush"
                Value="Transparent" />
        <Setter Property="Foreground"
                Value="{DynamicResource TextBrush}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="Background"
                                Background="{TemplateBinding Background}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ButtonHelper.CornerRadius), Mode=OneWay}" />
                        <Border x:Name="Border"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{x:Null}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ButtonHelper.CornerRadius), Mode=OneWay}" />
                        <Border x:Name="DisabledVisualElement"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Background="{DynamicResource ControlsDisabledBrush}"
                                IsHitTestVisible="false"
                                Opacity="0"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ButtonHelper.CornerRadius), Mode=OneWay}" />
                        <ContentPresenter x:Name="contentPresenter"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          RecognizesAccessKey="True"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Controls:ButtonHelper.PreserveTextCase"
                                 Value="False">
                            <Setter TargetName="contentPresenter"
                                    Property="Content"
                                    Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content, Converter={StaticResource ToUpperConverter}}" />
                        </Trigger>
                        <Trigger Property="Controls:ButtonHelper.PreserveTextCase"
                                 Value="True">
                            <Setter TargetName="contentPresenter"
                                    Property="Content"
                                    Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" />
                        </Trigger >
                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="Background"
                                    Property="Background"
                                    Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="Background"
                                    Property="Background"
                                    Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin"
                                 Value="True">
                            <Setter TargetName="Border"
                                    Property="BorderThickness"
                                    Value="0" />
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="Transparent" />
                        </Trigger>
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter TargetName="DisabledVisualElement"
                                    Property="Opacity"
                                    Value="0.7" />
                            <Setter TargetName="contentPresenter"
                                    Property="Opacity"
                                    Value="0.3" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MediumMenuButton" TargetType="{x:Type Controls:MenuButton}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="Background"
                Value="Transparent" />
        <Setter Property="Padding"
                Value="15,10" />
        <Setter Property="Foreground"
                Value="{DynamicResource ControlBackgroundBrush}" />
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="VerticalContentAlignment"
                Value="Stretch" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="FontSize"
                Value="13" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:MenuButton}">
                    <Border x:Name="MAIN_Border" CornerRadius="0" BorderThickness="0,0,1,0" BorderBrush="{DynamicResource AccentColorBorderBrush1}" Background="{TemplateBinding Background}">
                        <Border x:Name="INNER_Border" CornerRadius="0"  BorderThickness="0,0,1,0" BorderBrush="{DynamicResource AccentColorBorderBrush2}">
                            <ContentControl 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"                                          
                                          Opacity="1" >
                                <Grid Background="{TemplateBinding Background}" >
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="18" ></RowDefinition>
                                        <RowDefinition Height="Auto" ></RowDefinition>
                                    </Grid.RowDefinitions>
                                    <Path Grid.Row="0" Name="PATH_MenuIcon" Style="{TemplateBinding PathStyle}"  Fill="{DynamicResource WhiteColorBrush}" HorizontalAlignment="Center" VerticalAlignment="Top" />
                                    <ContentPresenter Content="{TemplateBinding Content}"  x:Name="contentPresenter" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Grid.Row="1"  ></ContentPresenter>
                                </Grid>
                            </ContentControl>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFirstButton" Value="True"  >
                            <Setter TargetName="MAIN_Border" Property="BorderThickness" Value="1,0,1,0" />
                            <Setter TargetName="INNER_Border" Property="BorderThickness" Value="1,0,1,0" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="MAIN_Border" Property="Background" Value="{DynamicResource HighlightBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver"
                     Value="True">
                <Setter Property="Background"
                        Value="{DynamicResource AccentColorBrush2}" />
            </Trigger>

            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource HighlightBrush}" />
            </Trigger>

            <Trigger Property="IsPressed"
                     Value="True">
                <Setter Property="Background"
                        Value="{DynamicResource HighlightBrush}" />
                <Setter Property="Foreground" 
                        Value="{DynamicResource WhiteColorBrush}" />
            </Trigger>
            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Foreground"
                        Value="{DynamicResource IdealForegroundDisabledBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="LargeMenuButton" TargetType="{x:Type Controls:MenuButton}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="Background"
                Value="Transparent"/>
        <Setter Property="VerticalContentAlignment"
                Value="Stretch" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="Foreground"
                Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type FrameworkElement}}, Path=(TextElement.Foreground)}"></Setter>
        <Setter Property="FontSize"
                Value="17" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:MenuButton}">
                    <Border x:Name="MAIN_Border" Margin="45,25,45,0" Background="{TemplateBinding Background}" >
                        <ContentControl x:Name="contentPresenter" Margin="{TemplateBinding Padding}"                                                                                                                              
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"  
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"></RowDefinition>
                                    <RowDefinition Height="Auto"></RowDefinition>
                                </Grid.RowDefinitions>
                                <Border x:Name="Inner_Border" Grid.Row="0" CornerRadius="2" BorderBrush="LightGray" BorderThickness="1,1,1,6" >
                                    <Border>
                                        <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch"  >
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="1*"></RowDefinition>
                                                <RowDefinition Height="3*"></RowDefinition>
                                                <RowDefinition Height="3*" ></RowDefinition>
                                                <RowDefinition Height="3*" ></RowDefinition>
                                            </Grid.RowDefinitions>
                                            <Path Grid.Row="1" Name="PATH_MenuIcon" Style="{TemplateBinding PathStyle}" Fill="{DynamicResource AccentColorBrush}"  HorizontalAlignment="Center" VerticalAlignment="Bottom" Stretch="Uniform" MaxWidth="83" />
                                            <TextBlock  Grid.Row="2"  VerticalAlignment="Center" HorizontalAlignment="Center" TextAlignment="Center"  x:Name="TextBlock_Title"  Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Title}"  FontSize="18" ></TextBlock>
                                            <TextBlock Grid.Row="3" VerticalAlignment="Top" HorizontalAlignment="Center" TextAlignment="Center" x:Name="TextBlock_Description"   Foreground="{TemplateBinding Foreground}"  Text="{TemplateBinding Description}"  FontSize="16" Margin="3"></TextBlock>
                                        </Grid>
                                    </Border>
                                </Border>
                                <Border x:Name="PART_SetAsStartup" Grid.Row="1" Padding="5" Margin="5" Visibility="Hidden">
                                    <CheckBox x:Name="CheckBox_SetAsStartup"  HorizontalAlignment="Center" VerticalAlignment="Bottom" IsChecked="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}">Set as Startup</CheckBox>
                                </Border>
                            </Grid>
                        </ContentControl>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="TextBlock_Title" Property="Foreground" Value="{DynamicResource WhiteColorBrush}" />
                            <Setter TargetName="TextBlock_Description" Property="Foreground" Value="{DynamicResource WhiteColorBrush}" />
                            <Setter Property="BorderBrush" Value="{DynamicResource HighlightBrush}" TargetName="Inner_Border" ></Setter>
                            <Setter Property="BorderThickness" Value="0,0,0,6" TargetName="Inner_Border" ></Setter>
                            <Setter TargetName="PATH_MenuIcon" Property="Fill" Value="{DynamicResource WhiteColorBrush}" />
                            <Setter TargetName="PART_SetAsStartup" Property="Visibility" Value="Visible" />
                            <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" TargetName="Inner_Border" />
                            <Setter Property="Foreground" Value="{DynamicResource WhiteColorBrush}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" TargetName="Inner_Border" />
                            <Setter Property="Foreground" Value="{DynamicResource WhiteColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>

            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Foreground"
                        Value="{DynamicResource IdealForegroundDisabledBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="IconButton"  TargetType="{x:Type Button}" >
        <Setter Property="Controls:ButtonHelper.CornerRadius" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="1" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Foreground" Value="{DynamicResource WhiteColorBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="{TemplateBinding Padding}"  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}" VerticalAlignment="{TemplateBinding VerticalAlignment}" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" Background="{TemplateBinding Background}"
                            CornerRadius="{TemplateBinding Controls:ButtonHelper.CornerRadius}" >
                        <Path Fill="{TemplateBinding Foreground}" Stretch="Uniform" Data="{TemplateBinding Controls:ControlsHelper.IconGeometry}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ToggleButton}" x:Key="MetroToggleButton">
        <Setter Property="Controls:ButtonHelper.CornerRadius" Value="3" />
        <Setter Property="BorderBrush" Value="{DynamicResource GrayBrush6}" ></Setter>
        <Setter Property="Foreground" Value="{DynamicResource WhiteColorBrush}" ></Setter>
        <Setter Property="HorizontalAlignment" Value="Right" ></Setter>
        <Setter Property="FontSize" Value="{DynamicResource IconButtonFontSize}" />
        <Setter Property="FontWeight" Value="Normal"></Setter>
        <Setter Property="VerticalAlignment" Value="Center" ></Setter>
        <Setter Property="Background" Value="{DynamicResource GrayBrush6}" ></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <Border x:Name="Border"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"                                    
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ButtonHelper.CornerRadius), Mode=OneWay}" />
                        <Border x:Name="DisabledVisualElement"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                Background="{DynamicResource ControlsDisabledBrush}"
                                IsHitTestVisible="false"
                                Opacity="0"
                                CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(Controls:ButtonHelper.CornerRadius), Mode=OneWay}" />
                        <ContentPresenter x:Name="contentPresenter"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          RecognizesAccessKey="True"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>

                    <ControlTemplate.Triggers>

                        <Trigger Property="Controls:ButtonHelper.PreserveTextCase"
                                 Value="False">
                            <Setter TargetName="contentPresenter"
                                    Property="Content"
                                    Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content, Converter={StaticResource ToUpperConverter}}" />
                        </Trigger>
                        <Trigger Property="Controls:ButtonHelper.PreserveTextCase"
                                 Value="True">
                            <Setter TargetName="contentPresenter"
                                    Property="Content"
                                    Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=Content}" />
                        </Trigger >
                        <!--<Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush2}" />
                        </Trigger>-->
                        <Trigger Property="IsPressed"
                                 Value="True">
                            <Setter TargetName="Border"
                                    Property="Background"
                                    Value="{DynamicResource HighlightBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked"
                                 Value="True">
                            <Setter Property="Background"                                    
                                    Value="{DynamicResource AccentColorBrush}" />
                            <Setter Property="BorderBrush"                                    
                                    Value="{DynamicResource AccentColorBrush}" />
                        </Trigger>
                        <!--<Trigger Property="IsKeyboardFocusWithin"
                                 Value="True">
                            <Setter TargetName="Border"
                                    Property="BorderThickness"
                                    Value="0.5" />
                            <Setter TargetName="Border"
                                    Property="BorderBrush"
                                    Value="{DynamicResource ButtonMouseOverBorderBrush}" />
                        </Trigger>-->
                        <Trigger Property="IsEnabled"
                                 Value="False">
                            <Setter TargetName="DisabledVisualElement"
                                    Property="Opacity"
                                    Value="0.7" />
                            <Setter TargetName="contentPresenter"
                                    Property="Opacity"
                                    Value="0.7" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MetroToggleButton}">
        <Setter Property="Padding" Value="20,0" ></Setter>
        <Setter Property="Height" Value="40" ></Setter>
    </Style>
    <Style TargetType="{x:Type ToggleButton}" x:Key="SimpleToggleButton" BasedOn="{StaticResource MetroToggleButton}" >
        <Setter Property="Controls:ButtonHelper.CornerRadius" Value="0" />
        <Setter Property="BorderBrush" Value="{DynamicResource BlackColorBrush}" ></Setter>
        <Setter Property="BorderThickness" Value="1" ></Setter>
        <Setter Property="Foreground" Value="{DynamicResource WhiteColorBrush}" ></Setter>
        <Setter Property="Padding" Value="0" ></Setter>
        <Setter Property="HorizontalAlignment" Value="Stretch" ></Setter>
        <Setter Property="FontSize" Value="{DynamicResource IconButtonFontSize}" />
        <Setter Property="FontWeight" Value="Normal"></Setter>
        <Setter Property="VerticalAlignment" Value="Stretch" ></Setter>
        <Setter Property="Background" Value="Transparent" ></Setter>
    </Style>
    <Style x:Key="RoundMenuButton" TargetType="{x:Type Controls:MenuButton}">
        <Setter Property="FocusVisualStyle"
                Value="{x:Null}" />
        <Setter Property="Background"
                Value="{DynamicResource SmokeGrayColor1Brush}" />
        <Setter Property="Padding"
                Value="0" />
        <Setter Property="Height"
                Value="50"></Setter>
        <Setter Property="Width"
                Value="50"></Setter>
        <Setter Property="Foreground"
                Value="{DynamicResource HighlightBrush}" />
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="VerticalContentAlignment"
                Value="Stretch" />
        <Setter Property="HorizontalContentAlignment"
                Value="Stretch" />
        <Setter Property="VerticalAlignment"
                Value="Stretch" />
        <Setter Property="HorizontalAlignment"
                Value="Stretch" />
        <Setter Property="BorderThickness"
                Value="0" />
        <Setter Property="FontSize"
                Value="{DynamicResource ContentFontSize}" />
        <!--<Setter Property="ToolTipService.ToolTip" Value="{TemplateBinding SnapsToDevicePixels}"></Setter>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Controls:MenuButton}">
                    <Grid>
                        <Border x:Name="MAIN_Border" CornerRadius="0" ToolTip="{TemplateBinding ToolTipService.ToolTip}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{DynamicResource AccentColorBorderBrush1}" Padding="{TemplateBinding Padding}"></Border>
                        <Path Name="backGround" Data="{DynamicResource icon_circle_d}" Fill="{TemplateBinding Background}" Stretch="Uniform" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                        <ContentControl Template="{TemplateBinding ContentTemplate}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"                                          
                                          Opacity="1" >
                        </ContentControl>
                        <ContentPresenter  Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"  x:Name="contentPresenter" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" ></ContentPresenter>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="backGround" Property="Fill" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}" />
                        </Trigger>

                        <!--<Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="backGround" Property="Fill" Value="{TemplateBinding Foreground}" />
                        </Trigger>-->

                        <Trigger Property="ToolTipService.ToolTip" Value="{x:Null}">
                            <Setter TargetName="MAIN_Border" Property="ToolTip" Value="{x:Null}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource Self}, Path=Foreground}" />
            </Trigger>

            <Trigger Property="IsPressed"
                     Value="True">
                <Setter Property="Background"
                        Value="{Binding RelativeSource={RelativeSource Self},Path=Foreground}" />
            </Trigger>

            <Trigger Property="IsEnabled"
                     Value="False">
                <Setter Property="Background"
                        Value="{DynamicResource IdealForegroundDisabledBrush}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type ToggleButton}" x:Key="TickMarkToggleButton">
        <!--<Setter Property="BorderBrush" Value="Blue" ></Setter>-->
        <Setter Property="Foreground" Value="Black"></Setter>
        <Setter Property="HorizontalAlignment" Value="Left" ></Setter>
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Height" Value="40" />
        <Setter Property="FontWeight" Value="Normal"></Setter>
        <Setter Property="VerticalAlignment" Value="Center" ></Setter>
        <Setter Property="Background" Value="{DynamicResource AccentColorBrush}" ></Setter>
        <Setter Property="Padding" Value="0,0,5,0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid>
                        <!--  sadad -->
                        <Grid x:Name="BackgroundPanel" >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"></ColumnDefinition>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                                <ColumnDefinition Width="Auto"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <Path x:Name="leftEllipse" Margin="0,0,-1,0" Grid.Column="0" Data="{StaticResource icon_half_left_circle_d}" HorizontalAlignment="Left" Fill="{TemplateBinding Background}" Stretch="UniformToFill" Height="{TemplateBinding Height}"></Path>
                            <Rectangle Fill="{TemplateBinding Background}" Grid.Column="1" Margin="0" HorizontalAlignment="Stretch"></Rectangle>
                            <Path x:Name="rightEllipse" Margin="-1,0,0,0" Grid.Column="2" Data="{StaticResource icon_half_right_circle_d}" HorizontalAlignment="Left" Fill="{TemplateBinding Background}" Stretch="UniformToFill" Height="{TemplateBinding Height}"></Path>
                        </Grid>

                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"></ColumnDefinition>
                                <ColumnDefinition Width="Auto"></ColumnDefinition>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                                <ColumnDefinition Width="Auto"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <Path x:Name="leftCornerCircle" Data="{StaticResource icon_circle_d}" Fill="White" Stretch="Uniform" Grid.Column="0" Margin="3"></Path>
                            <Path Grid.Column="1" HorizontalAlignment="Center" Fill="Black" MaxHeight="17" MaxWidth="20" MinWidth="{TemplateBinding Controls:ControlsHelper.IconWidth}"  MinHeight="{TemplateBinding Controls:ControlsHelper.IconHeight}" Stretch="Uniform" Data="{TemplateBinding Controls:ControlsHelper.IconGeometry}" Margin="5" />
                            <ContentPresenter x:Name="contentPresenter" Grid.Column="2"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          RecognizesAccessKey="True"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                            <Grid Grid.Column="3">
                                <Path x:Name="rightCircle" Data="{StaticResource icon_circle_d}" Fill="White" Stretch="Uniform" Margin="3"></Path>
                                <Path x:Name="TickMark" Data="{StaticResource icon_right_tick_d}" Fill="Black" Stretch="Uniform" Margin="10"></Path>
                            </Grid>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked"
                                 Value="True">
                            <Setter TargetName="TickMark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="leftCornerCircle" Property="Visibility" Value="Hidden"/>
                        </Trigger>

                        <Trigger Property="IsChecked"
                                 Value="False">
                            <Setter TargetName="TickMark" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="rightCircle" Property="Visibility" Value="Hidden"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver"
                                 Value="True">
                            <Setter TargetName="BackgroundPanel" Property="Opacity"
                                    Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>